diff --git a/refresh.template.py b/refresh.template.py
index 2bc32f1..e265db0 100644
--- a/refresh.template.py
+++ b/refresh.template.py
@@ -30,6 +30,8 @@ import re
 import shlex
 import shutil
 import subprocess
+import argparse
+import ast
 import sys
 import tempfile
 import time
@@ -1125,6 +1127,29 @@ def _get_cpp_command_for_files(compile_action):
     return source_files, header_files, compile_action.arguments
 
 
+def _get_option_value(argv, option):
+    """Extract the list of values for option from the argv list.
+
+    Args:
+    argv: A list of strings, possibly the argv passed to main().
+    option: The option whose value to extract, with the leading '-'.
+
+    Returns:
+    A list of values, either directly following the option,
+    (eg., -opt val1 val2) or values collected from multiple occurrences of
+    the option (eg., -opt val1 -opt val2).
+    """
+
+    parser = argparse.ArgumentParser()
+    parser.add_argument(option, nargs='*', action='append')
+    option = option.lstrip('-').replace('-', '_')
+    args, _ = parser.parse_known_args(argv)
+    if not args or not vars(args)[option]:
+        return []
+    else:
+        return sum(vars(args)[option], [])
+
+
 def _convert_compile_commands(aquery_output):
     """Converts from Bazel's aquery format to de-Bazeled compile_commands.json entries.
 
@@ -1165,6 +1190,21 @@ def _convert_compile_commands(aquery_output):
 
         for file in itertools.chain(source_files, header_files_not_already_written):
             if file == 'external/bazel_tools/src/tools/launcher/dummy.cc': continue # Suppress Bazel internal files leaking through. Hopefully will prevent issues like https://github.com/hedronvision/bazel-compile-commands-extractor/issues/77
+            crosstool_wrapper_driver= pathlib.Path("external/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc")
+            has_cuda = _get_option_value(compile_command_args,"-x")[0] == "cuda"
+            if has_cuda and crosstool_wrapper_driver.exists():
+                get_command_proc = subprocess.run(compile_command_args+["-generate_command"],capture_output=True,encoding="utf-8",check=False)
+                if get_command_proc.returncode == 0 and get_command_proc.stdout:
+                    yield {
+                    # Docs about compile_commands.json format: https://clang.llvm.org/docs/JSONCompilationDatabase.html#format
+                    'file': file,
+                    # Using `arguments' instead of 'command' because it's now preferred by clangd. Heads also that  shlex.join doesn't work for windows cmd, so you'd need to use windows_list2cmdline if we ever switched back. For more, see https://github.com/hedronvision/bazel-compile-commands-extractor/issues/8#issuecomment-1090262263
+                    'arguments': ast.literal_eval(get_command_proc.stdout.strip()),
+                    # Bazel gotcha warning: If you were tempted to use `bazel info execution_root` as the build working directory for compile_commands...search ImplementationReadme.md to learn why that breaks.
+                    'directory': os.environ["BUILD_WORKSPACE_DIRECTORY"],
+                    }
+                    continue
+        
             yield {
                 # Docs about compile_commands.json format: https://clang.llvm.org/docs/JSONCompilationDatabase.html#format
                 'file': file,
